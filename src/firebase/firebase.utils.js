import firebase from 'firebase/app'; //firebase utility library
import 'firebase/firestore';
import 'firebase/auth';

const config = {
    apiKey: "AIzaSyDhkasqpYaSdG4k2Sz8m2na3c8GDQFpGZQ",
    authDomain: "crwn-db-bcf18.firebaseapp.com",
    databaseURL: "https://crwn-db-bcf18.firebaseio.com",
    projectId: "crwn-db-bcf18",
    storageBucket: "crwn-db-bcf18.appspot.com",
    messagingSenderId: "951178947332",
    appId: "1:951178947332:web:b420a1f2091d13d355be51",
    measurementId: "G-DQ8236F229"
};

firebase.initializeApp(config);

// userAuth passed from auth.onAuthStateChanged in App.js
export const createUserProfileDocument = async (userAuth, additionalData) => {
    if (!userAuth) return;

    const userRef = firestore.doc(`users/${userAuth.uid}`); //DocumentReference

    const snapshot = await userRef.get(); //Promise<DocumentSnapshot>

    if (!snapshot.exists) {
        const {displayName, email} = userAuth;
        const createdAt = new Date();

        try {
            await userRef.set({
                displayName,
                email,
                createdAt,
                ...additionalData
            })
        } catch (error) {
            console.log('error creating user', error.message)
        }
    }

    return userRef;  //userRef exists in database
};

export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {
    const collectionRef = firestore.collection(collectionKey);

    const batch = firestore.batch();
    objectsToAdd.forEach(obj => {
        const newDocRef = collectionRef.doc(); // new documentRef in the collection with a unique id generated by Firestore
        batch.set(newDocRef, obj); // set the value of the new documentRef to the obj
    });

    return await batch.commit();
};

export const convertCollectionsSnapshotToMap = (querySnapshot) => {
    // docs: QueryDocumentSnapshot[]
    const transformedCollection = querySnapshot.docs.map(doc => {
        const {title, items} = doc.data();

        return {
            routeName: encodeURI(title.toLowerCase()),
            id: doc.id,
            title,
            items
        }
    });

    return transformedCollection.reduce((acc, collection) => {
        acc[collection.title.toLowerCase()] = collection;
        return acc;
    }, {});
};

export const getCurrentUser = () => {
    return new Promise((resolve, reject) => {
        const unsubscribe = auth.onAuthStateChanged(userAuth => {
            unsubscribe();
            resolve(userAuth);
        }, reject)
    })
};

export const auth = firebase.auth();
export const firestore = firebase.firestore();

// Setup Google Authentication utility
export const googleAuthProvider = new firebase.auth.GoogleAuthProvider();
googleAuthProvider.setCustomParameters({prompt: 'select_account'});
export const signInWithGoogle = () => auth.signInWithPopup(googleAuthProvider);

export default firebase;
